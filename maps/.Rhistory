demo()
Hershey
> x = seq(1,10) # set the x-axis values
> b = 3 # set the intercept
> m = 0.5 # set the slope
> y = m*x + b
> plot(x,y) # plot paired coordinates. This only works if x and y are the same length!
> plot(y~x) # plot y as a function of x
1+1
print('Hello world!') # why quotes? why parenthesis? what is the 'argument' for this function?
help(print) # now why aren't there quotes?
mixed.data <- c(1,2,'a',7)
typeof(mixed.data) # it's a character, and now all the numbers are in quotes!
number.set<-c(number.set, 11, 12, 13) # concatenate the object with itself
number.set<-c(number.set, 11, 12, 13) # concatenate the object with itself
pasted.data <- paste(1,2,3)
# This function works like c(), but puts all of the arguments into one element
length(pasted.data)
rep.data <- rep(10,5)
?rep.data
?rep
x = seq(1,10) # set the x-axis values
b = 3 # set the intercept
m = 0.5 # set the slope
y = m*x + b
plot(x,y) # plot paired coordinates. This only works if x and y are the same length!
plot(y~x) # plot y as a function of x
getwd() # This returns the path to the working directory. This is where R will save your outputs.
library(qtl)
data(hyper)
summary(hyper)
plot.missing(hyper, reorder = TRUE)
hyper <- calc.errorlod(hyper, error.prob=0.01)
top.errorlod(hyper)
plot.geno(hyper, chr=1, ind=c(117:119,137:139,157:184))
hyper <- calc.genoprob(hyper, step=2, error.prob=0.01)
## Scan to get interval mapping (em) and Haley-Knott (hk) LOD curves.
out.em <- scanone(hyper)
out.hk <- scanone(hyper, method="hk")
## Summaries: max per chromosome above threshold.
summary(out.em, threshold=3)
summary(out.hk, threshold=3)
plot(out.em, chr = c(1,4,6,15))
plot(out.hk, chr = c(1,4,6,15), add = TRUE, lty = 2)
## Permutation thresholds (much faster with hk).
operm.hk <- scanone(hyper, method="hk", n.perm=1000)
summary(operm.hk, alpha=c(0.01,0.05))
abline(h = summary(operm.hk, alpha=c(0.01,0.05)), lty = 3)
summary(out.hk, perms=operm.hk, alpha=0.05, pvalues=TRUE)
## Calculate genoprob on coarser grid (faster) for 2-D scan.
hyper <- calc.genoprob(hyper, step=5, error.prob=0.01)
out2.hk <- scantwo(hyper, method="hk")
summary(out2.hk, thresholds=c(6.0, 4.7, 4.4, 4.7, 2.6))
summary(out2.hk, thresholds=c(6.0, 4.7, 4.4, 4.7, 2.6), what = "int")
plot(out2.hk, chr=c(1,4,6,15))
hyper <- sim.geno(hyper, step=2, n.draws=16, error.prob=0.01)
qtl <- makeqtl(hyper, chr = c(1, 1, 4, 6, 15), pos = c(50, 76, 30, 70, 20))
my.formula <- y ~ Q1 + Q2 + Q3 + Q4 + Q5 + Q4:Q5
out.fitqtl <- fitqtl(hyper, pheno.col = 1, qtl, formula=my.formula)
summary(out.fitqtl)
hyper <- sim.geno(hyper, step=2, n.draws=16, error.prob=0.01)
effectplot(hyper, pheno.col = 1, mname1 = "D1Mit334")
effectplot(hyper, pheno.col = 1, mname1 = "D4Mit164")
markers <- find.marker(hyper, chr = c(6,15), pos = c(70,20))
markers
effectplot(hyper, pheno.col = 1, mname1 = markers[1], mname2 = markers[2])
effectplot(hyper, pheno.col = 1, mname1 = markers[2], mname2 = markers[1])
effectplot(hyper, pheno.col = 1, mname1 = "D1Mit334")
effectplot(hyper, pheno.col = 1, mname1 = "D4Mit164")
effectplot(hyper, pheno.col = 1, mname1 = markers[1], mname2 = markers[2])
effectplot(hyper, pheno.col = 1, mname1 = markers[2], mname2 = markers[1])
plot.pxg(hyper, "D1Mit334")
plot.pxg(hyper, "D4Mit164")
plot.pxg(hyper, markers)
markers
library(qtl)
library(qtl)
install.packages("asreml")
ASREML_LICENSE_FILE=/Library/Frameworks/R.framework/Versions/2.12/Resources/lib/asreml.lic
library(asreml)
install.packages("PopGenReport")
install.packages("PopGenReport", repos='http://cran.rstudio.com/')
install.packages("PopGenReport")
library(driftsel)
library(RAFM)
load("~/Dropbox/QSTFST/maps/mappintime.RData")
setwd("~/Dropbox/QSTFST/maps/")
gps.all <- read.csv("newmap.csv")
fst <- gps.all[which(gps.all$type=="Fst"),]
qst <- gps.all[which(gps.all$type=="Qst"),]
library(maps)
library(mapdata)
library(RgoogleMaps)
library(plotrix)
map('county', "Colorado",xlim=extendrange(gps$Lon, f=1), ylim=extendrange(gps$Lat, f=.1))
points(qst$long, qst$lat, pch=15, cex=1, col=as.character(qst$color))
points(fst$long, fst$lat, pch=19, cex=1, col=as.character(fst$color))
text(fst$long, fst$lat, labels=fst$num,pos=2, cex=.5)
text(qst$long, qst$lat, labels=qst$num,pos=2, cex=.5)
map.axes()
title(main="All collection sites", xlab="Longitude", ylab="Latitude",  cex.lab=0.75)
# dev.off()
co.map <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="terrain", #you can specify roadmaps or terrain
zoom=7) #play with zoom to get the extent you want 1-21
co.map.r <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="road", #you can specify roadmaps or terrain
zoom=7)
co.map.h <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="terrain-background", #you can specify roadmaps or terrain
zoom=7)
library(lattice)
library(maptools)
library(ggplot2)
map('county', "Colorado",xlim=extendrange(gps$Lon, f=1), ylim=extendrange(gps$Lat, f=.1))
points(qst$long, qst$lat, pch=15, cex=1, col=as.character(qst$color))
points(fst$long, fst$lat, pch=19, cex=1, col=as.character(fst$color))
text(fst$long, fst$lat, labels=fst$num,pos=2, cex=.5)
text(qst$long, qst$lat, labels=qst$num,pos=2, cex=.5)
map.axes()
title(main="All collection sites", xlab="Longitude", ylab="Latitude",  cex.lab=0.75)
# dev.off()
co.map <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="terrain", #you can specify roadmaps or terrain
zoom=7) #play with zoom to get the extent you want 1-21
co.map.r <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="road", #you can specify roadmaps or terrain
zoom=7)
co.map.h <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="terrain-background", #you can specify roadmaps or terrain
zoom=7)
library(ggplot2)
library(ggmap)
library(ggsubplot)
map('county', "Colorado",xlim=extendrange(gps$Lon, f=1), ylim=extendrange(gps$Lat, f=.1))
points(qst$long, qst$lat, pch=15, cex=1, col=as.character(qst$color))
points(fst$long, fst$lat, pch=19, cex=1, col=as.character(fst$color))
text(fst$long, fst$lat, labels=fst$num,pos=2, cex=.5)
text(qst$long, qst$lat, labels=qst$num,pos=2, cex=.5)
map.axes()
title(main="All collection sites", xlab="Longitude", ylab="Latitude",  cex.lab=0.75)
# dev.off()
co.map <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="terrain", #you can specify roadmaps or terrain
zoom=7) #play with zoom to get the extent you want 1-21
co.map.r <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="road", #you can specify roadmaps or terrain
zoom=7)
co.map.h <- get_map("colorado springs", #first argument is basically querrying google maps
maptype="terrain-background", #you can specify roadmaps or terrain
zoom=7)
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
gps.all
gps.all[12:length(gps.all)]
gps.all[12:length(gps.all),]
gps.all[c(12:length(gps.all)),]
gps.all[12:39,]
gps.all <- gps.all[12:39,]
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
dev.off()
gps.all <- gps.all[12:39,]
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
gps.all <- read.csv("newmap.csv")
gps.all <- gps.all[12:39,]
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
gps.all <- read.csv("newmap.csv")
gps.all <- gps.all[c(1:22,35:39),]
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
pdf("allpointsco_nooverlap.pdf")
gps.all <- gps.all[c(1:22,35:39),]
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
dev.off()
gps.all <- read.csv("newmap.csv")
pdf("allpointsco_nooverlap.pdf")
gps.all <- gps.all[c(1:22,35:39),]
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=7.5, shape=22) +
ggtitle("All collection sites") +
geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
dev.off()
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=5, shape=20) +
ggtitle("All collection sites") +
# geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
gps.all
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=5, shape=21) +
ggtitle("All collection sites") +
# geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
pdf("allpointsco_nooverlap.pdf")
ggmap(co.map.r)+
geom_point(data=gps.all, aes(x=long, y=lat), fill=gps.all$color,
alpha=.8,size=5, shape=21) +
ggtitle("All collection sites") +
# geom_text(data=gps.all, aes(x=long, y=lat, label=num), size=3, color="white") + #adding IDs
ylim(36.9, 40.25) +
xlim(-107,-103.5) +
xlab("Longitude")+
ylab("Latitude")
dev.off()
