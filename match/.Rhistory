demo()
Hershey
> x = seq(1,10) # set the x-axis values
> b = 3 # set the intercept
> m = 0.5 # set the slope
> y = m*x + b
> plot(x,y) # plot paired coordinates. This only works if x and y are the same length!
> plot(y~x) # plot y as a function of x
1+1
print('Hello world!') # why quotes? why parenthesis? what is the 'argument' for this function?
help(print) # now why aren't there quotes?
mixed.data <- c(1,2,'a',7)
typeof(mixed.data) # it's a character, and now all the numbers are in quotes!
number.set<-c(number.set, 11, 12, 13) # concatenate the object with itself
number.set<-c(number.set, 11, 12, 13) # concatenate the object with itself
pasted.data <- paste(1,2,3)
# This function works like c(), but puts all of the arguments into one element
length(pasted.data)
rep.data <- rep(10,5)
?rep.data
?rep
x = seq(1,10) # set the x-axis values
b = 3 # set the intercept
m = 0.5 # set the slope
y = m*x + b
plot(x,y) # plot paired coordinates. This only works if x and y are the same length!
plot(y~x) # plot y as a function of x
getwd() # This returns the path to the working directory. This is where R will save your outputs.
library(qtl)
data(hyper)
summary(hyper)
plot.missing(hyper, reorder = TRUE)
hyper <- calc.errorlod(hyper, error.prob=0.01)
top.errorlod(hyper)
plot.geno(hyper, chr=1, ind=c(117:119,137:139,157:184))
hyper <- calc.genoprob(hyper, step=2, error.prob=0.01)
## Scan to get interval mapping (em) and Haley-Knott (hk) LOD curves.
out.em <- scanone(hyper)
out.hk <- scanone(hyper, method="hk")
## Summaries: max per chromosome above threshold.
summary(out.em, threshold=3)
summary(out.hk, threshold=3)
plot(out.em, chr = c(1,4,6,15))
plot(out.hk, chr = c(1,4,6,15), add = TRUE, lty = 2)
## Permutation thresholds (much faster with hk).
operm.hk <- scanone(hyper, method="hk", n.perm=1000)
summary(operm.hk, alpha=c(0.01,0.05))
abline(h = summary(operm.hk, alpha=c(0.01,0.05)), lty = 3)
summary(out.hk, perms=operm.hk, alpha=0.05, pvalues=TRUE)
## Calculate genoprob on coarser grid (faster) for 2-D scan.
hyper <- calc.genoprob(hyper, step=5, error.prob=0.01)
out2.hk <- scantwo(hyper, method="hk")
summary(out2.hk, thresholds=c(6.0, 4.7, 4.4, 4.7, 2.6))
summary(out2.hk, thresholds=c(6.0, 4.7, 4.4, 4.7, 2.6), what = "int")
plot(out2.hk, chr=c(1,4,6,15))
hyper <- sim.geno(hyper, step=2, n.draws=16, error.prob=0.01)
qtl <- makeqtl(hyper, chr = c(1, 1, 4, 6, 15), pos = c(50, 76, 30, 70, 20))
my.formula <- y ~ Q1 + Q2 + Q3 + Q4 + Q5 + Q4:Q5
out.fitqtl <- fitqtl(hyper, pheno.col = 1, qtl, formula=my.formula)
summary(out.fitqtl)
hyper <- sim.geno(hyper, step=2, n.draws=16, error.prob=0.01)
effectplot(hyper, pheno.col = 1, mname1 = "D1Mit334")
effectplot(hyper, pheno.col = 1, mname1 = "D4Mit164")
markers <- find.marker(hyper, chr = c(6,15), pos = c(70,20))
markers
effectplot(hyper, pheno.col = 1, mname1 = markers[1], mname2 = markers[2])
effectplot(hyper, pheno.col = 1, mname1 = markers[2], mname2 = markers[1])
effectplot(hyper, pheno.col = 1, mname1 = "D1Mit334")
effectplot(hyper, pheno.col = 1, mname1 = "D4Mit164")
effectplot(hyper, pheno.col = 1, mname1 = markers[1], mname2 = markers[2])
effectplot(hyper, pheno.col = 1, mname1 = markers[2], mname2 = markers[1])
plot.pxg(hyper, "D1Mit334")
plot.pxg(hyper, "D4Mit164")
plot.pxg(hyper, markers)
markers
library(qtl)
library(qtl)
install.packages("asreml")
ASREML_LICENSE_FILE=/Library/Frameworks/R.framework/Versions/2.12/Resources/lib/asreml.lic
library(asreml)
install.packages("PopGenReport")
install.packages("PopGenReport", repos='http://cran.rstudio.com/')
install.packages("PopGenReport")
source('~/Dropbox/fromdesktop/Multivariate_Qst_Galba_truncatula-2/transfo data.r')
source('~/Dropbox/QSTFST/match/package neutrality test.r')
data=early2;
------  do the manova + estimate covariance matrices ------------------------
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,data=data))                   #do the manova
SSb=manov$SS$"factor(pop)";                             #between pop Sum Squares (SS)
SSw=manov$SS$Residuals;                                 #within pop SS
dfb=manov$stats[1,1];dfw=manov$stats[2,1];              #df between/within pops
nf=mean(nn)-1/nbpop*((mean(nn^2)-mean(nn)^2)/mean(nn)); #compute the equivalent df with unbalanced designs
#(nn=nb of families within pop, nbpop=nb of populations)
MSw=SSw/dfw;MSb=SSb/dfb;                                #compute the corresponding Mean Square matrices
Gw=MSw;Gb=(MSb-Gw)/nf;                                  #compute the corresponding G matrices
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);           #cre
#--------  do the manova + estimate covariance matrices ------------------------
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,data=data))                   #do the manova
SSb=manov$SS$"factor(pop)";                             #between pop Sum Squares (SS)
SSw=manov$SS$Residuals;                                 #within pop SS
dfb=manov$stats[1,1];dfw=manov$stats[2,1];              #df between/within pops
nf=mean(nn)-1/nbpop*((mean(nn^2)-mean(nn)^2)/mean(nn)); #compute the equivalent df with unbalanced designs
#(nn=nb of families within pop, nbpop=nb of populations)
MSw=SSw/dfw;MSb=SSb/dfb;                                #compute the corresponding Mean Square matrices
Gw=MSw;Gb=(MSb-Gw)/nf;                                  #compute the corresponding G matrices
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);           #create the inputs for k.prop()
manov
form
factor(pop)
SSb
manov$SS
manov
nf
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
testMS=k.prop(DF,MS);
paste("pBartlett=",signif(testMS$pt1,3),"pChi≤=",signif(testMS$pX,3))
form=as.formula(paste("cbind(",effect,")~factor(habit)/factor(pop)",sep=""))
manov=summary(manova(form,data=data))
SSh=manov$SS$"factor(habit)";
SSb=manov$SS$"factor(habit):factor(pop)";
SSw=manov$SS$Residuals;
dfbh=manov$stats[1,1];dfb=manov$stats[2,1];dfw=manov$stats[3,1]; #df between habitat, between pops within habitats, within pop
nf=mean(nn)-1/nbpop*((mean(nn^2)-mean(nn)^2)/mean(nn));
MSw=SSw/dfw;MSb=SSb/dfb; MSbh=SSh/dfbh;
Gw=MSw;Gb=(MSb-Gw)/nf;#within and between population nested within in habitats
Gbh=(MSbh-Gb)/nbpop; #between habita
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);    #create the inputs for k.prop()
#-------- Retrieve the CI for rho and p-value for the proportionality test -----
#rho_st from test between G matrices
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
#p-values from test between MS matrices
testMS=k.prop(DF,MS);
paste("pBartlett=",signif(testMS$pt1,3),"pChi≤=",signif(testMS$pX,3))
setwd("~/Dropbox/QSTFST/match/")
MarkerInfo <- read.csv("matched_geno.csv")
TraitInfo <- read.csv("matchpop_unbal.csv")
tm <- read.csv("trait.mean.csv")
head(tm)
data <- as.matrix(tm[,4:9])
factor <- as.matrix(tm[,3])
model <- summary(manova(data~factor))
model$SS
model
early2
head(data)
data=early2;
head(data)
head(trait.mean)
head(tm)
head(tm)
head(data)
test.data <- cbind(tm$Pop, tm$Dam, tm[,4:9])
heat(test.data)
head(test.data)
names(test.data)
names(test.data) <- c("pop","fam","CorollaWidth","CorolLalength","PetalLength","Color","NectarAmt","NectarConc")
names(data)
head(tm)
test.data <- cbind(tm$X, tm$Pop, tm$Dam, tm[,4:9])
names(test.data)
names(test.data) <- c("id", "pop","fam","CorollaWidth","CorolLalength","PetalLength","Color","NectarAmt","NectarConc")
names(test.data)
names(data)
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
dim(data)[2]-3
table(data$pop)
length(nn)
names(data[-c(1:3)])
paste(traits,collapse=",")
paste("cbind(",effect,")~factor(pop)",sep="")
as.formula(paste("cbind(",effect,")~factor(pop)",sep=""))
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
n
nn
nbpop
traits=names(data[-c(1:3)]);
traits
traits=names(test.data[-c(1:3)]);
traits
effect=paste(traits,collapse=",")
effect
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
form
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #a
manov=summary(manova(form,data=data))                   #do the manova
manov
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,test.data=test.data))
effect
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,data=data))
form
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep=""))
form
manov=summary(manova(form,test.data=test.data))                   #do the manova
head(data)
head(test.data)
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
effect
## for test.data
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
effect
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
summary(manova(form,test.data=test.data))
form
effect=paste(traits,collapse=",")
effect
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
form
names(test.data) <- c("id", "pop","fam","CorW","CorL","PetL","Col","NecA","NecC")
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep=""))
form
manov=summary(manova(form,test.data=test.data))                   #do the manova
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #a
form
long3
manov=summary(manova(form,data=data))                   #do the manova
is.matrix(data)
is.matrix(test.data)
head(test)
head(data)
class(data)
class(test.data)
sapply(data, mode)
sapply(test.data, mode)
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,data=data))
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep=""))
form
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #
form
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #
manov=summary(manova(form,data=test.data))                   #do the manova
SSb=manov$SS$"factor(pop)";                             #between pop Sum Squares (SS)
SSw=manov$SS$Residuals;                                 #within pop SS
manov
SSb=manov$SS$"factor(pop)";                             #between pop Sum Squares (SS)
SSw=manov$SS$Residuals;                                 #within pop SS
dfb=manov$stats[1,1];dfw=manov$stats[2,1];              #df between/within pops
nf=mean(nn)-1/nbpop*((mean(nn^2)-mean(nn)^2)/mean(nn)); #compute the equivalent df with unbalanced designs
MSw=SSw/dfw;MSb=SSb/dfb;                                #compute the corresponding Mean Square matrices
Gw=MSw;Gb=(MSb-Gw)/nf;                                  #compute the corresponding G matrices
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);
#rho_st from test between G matrices
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
#p-values from test between MS matrices
testMS=k.prop(DF,MS);
paste("pBartlett=",signif(testMS$pt1,3),"pChi≤=",signif(testMS$pX,3))
Gw
Gb
Gwcor<- cov2cor(Gw)
Gbcor<- cov2cor(Gb)
Gwcor
Gbcor
4Gw <- 4*Gw
4Gw
Gw4 <- 4*Gw
Gw4cor<- cov2cor(Gw4)
Gw4cor
Gw4
DF=c(dfw,dfb);G=list(Gw4,Gb);MS=list(MSw,MSb);
DF=c(dfw,dfb);G4=list(Gw4,Gb);MS=list(MSw,MSb);
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);           #create the inputs for k.prop()
testG4=k.prop(DF,G4)
paste("rho_P (population) =",signif(testG4$rho[[2]],2))
print("95% CI for rho_P :");signif(testG4$CI[[2]],2)
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
n=dim(data)[2]-3;nn=table(data$pop);nbpop=length(nn);
traits=names(data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,data=data))                   #do the manova
SSb=manov$SS$"factor(pop)";                             #between pop Sum Squares (SS)
SSw=manov$SS$Residuals;                                 #within pop SS
dfb=manov$stats[1,1];dfw=manov$stats[2,1];              #df between/within pops
nf=mean(nn)-1/nbpop*((mean(nn^2)-mean(nn)^2)/mean(nn)); #compute the equivalent df with unbalanced designs
#(nn=nb of families within pop, nbpop=nb of populations)
MSw=SSw/dfw;MSb=SSb/dfb;                                #compute the corresponding Mean Square matrices
Gw=MSw;Gb=(MSb-Gw)/nf;                                  #compute the corresponding G matrices
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
n=dim(test.data)[2]-3;nn=table(test.data$pop);nbpop=length(nn);
traits=names(test.data[-c(1:3)]);
effect=paste(traits,collapse=",")
form=as.formula(paste("cbind(",effect,")~factor(pop)",sep="")) #automated formula for the manova
manov=summary(manova(form,data=test.data))                   #do the manova
SSb=manov$SS$"factor(pop)";                             #between pop Sum Squares (SS)
SSw=manov$SS$Residuals;                                 #within pop SS
dfb=manov$stats[1,1];dfw=manov$stats[2,1];              #df between/within pops
nf=mean(nn)-1/nbpop*((mean(nn^2)-mean(nn)^2)/mean(nn)); #
MSw=SSw/dfw;MSb=SSb/dfb;                                #compute the corresponding Mean Square matrices
Gw=MSw;Gb=(MSb-Gw)/nf;                                  #compute the corresponding G matrices
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
Gw4 <- 4*Gw
DF=c(dfw,dfb);G4=list(Gw4,Gb);MS=list(MSw,MSb);
testG4=k.prop(DF,G4)
paste("rho_P (population) =",signif(testG4$rho[[2]],2))
print("95% CI for rho_P :");signif(testG4$CI[[2]],2)
testMS=k.prop(DF,MS);
paste("pBartlett=",signif(testMS$pt1,3),"pChi≤=",signif(testMS$pX,3))
SSw
MSw
Gw4=4*MSw;Gb=(MSb-Gw4)/nf;
DF=c(dfw,dfb);G4=list(Gw4,Gb);MS=list(MSw,MSb);
testG4=k.prop(DF,G4)
paste("rho_P (population) =",signif(testG4$rho[[2]],2))
print("95% CI for rho_P :");signif(testG4$CI[[2]],2)
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
testMS=k.prop(DF,MS);
testMS
MSw=(4*SSw)/dfw;MSb=SSb/dfb;                                #compute the corresponding Mean Square matrices
Gw=MSw;Gb=(MSb-Gw)/nf;                                  #compute the corresponding G matrices
DF=c(dfw,dfb);G=list(Gw,Gb);MS=list(MSw,MSb);           #create the inputs for k.prop()
testG=k.prop(DF,G)
paste("rho_P (population) =",signif(testG$rho[[2]],2))
print("95% CI for rho_P :");signif(testG$CI[[2]],2)
testMS=k.prop(DF,MS);
paste("pBartlett=",signif(testMS$pt1,3),"pChi≤=",signif(testMS$pX,3))
2*.026
(2*.026)/(1-.026)
install.packages("hierfstat")
library(hierfstat)
mydata
mydata <- df2genind(MarkerInfo[,2:12], pop=MarkerInfo$pop)
summary(mydata)
library(adegenet)
MarkerInfo <- read.csv("matched_geno.csv")
mydata <- df2genind(MarkerInfo[,2:12], pop=MarkerInfo$pop)
summary(mydata)
pairwist.fst(mydata)
fstat(mydata)
mydata
mydata$pop
pairwise.fst(mydata)
save.image("inprocess_april2.RData")
